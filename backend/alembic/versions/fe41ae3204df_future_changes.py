"""future changes

Revision ID: fe41ae3204df
Revises: 8c09acf7317c
Create Date: 2025-08-24 22:36:45.976395

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "fe41ae3204df"
down_revision: Union[str, None] = "8c09acf7317c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - adjusted ###

    # datasets changes
    op.add_column("datasets", sa.Column("workflow_id", sa.Integer(), nullable=True))
    op.add_column(
        "datasets", sa.Column("node_id", sa.String(length=100), nullable=True)
    )
    op.add_column(
        "datasets", sa.Column("dataset_type", sa.String(length=50), nullable=True)
    )
    op.create_foreign_key(None, "datasets", "workflows", ["workflow_id"], ["id"])

    # workflows changes
    op.add_column(
        "workflows", sa.Column("started_at", sa.DateTime(timezone=True), nullable=True)
    )
    op.add_column(
        "workflows",
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
    )

    # Replace "progress" column (VARCHAR → Float)
    op.drop_column("workflows", "progress")
    op.add_column("workflows", sa.Column("progress", sa.Float(), nullable=True))

    # Replace "execution_time" column (Integer → Float)
    op.drop_column("workflows", "execution_time")
    op.add_column("workflows", sa.Column("execution_time", sa.Float(), nullable=True))


def downgrade() -> None:
    # Roll back execution_time (Float → Integer)
    op.drop_column("workflows", "execution_time")
    op.add_column("workflows", sa.Column("execution_time", sa.Integer(), nullable=True))

    # Roll back progress (Float → VARCHAR)
    op.drop_column("workflows", "progress")
    op.add_column("workflows", sa.Column("progress", sa.String(), nullable=True))

    # Roll back workflows
    op.drop_column("workflows", "completed_at")
    op.drop_column("workflows", "started_at")

    # Roll back datasets
    op.drop_constraint(None, "datasets", type_="foreignkey")
    op.drop_column("datasets", "dataset_type")
    op.drop_column("datasets", "node_id")
    op.drop_column("datasets", "workflow_id")
